pyspark.sql.functions.first

Aggregate function: returns the first value in a group.

The function by default returns the first values it sees. 
It will return the first non-null value it sees when ignoreNulls is set to true. 
If all values are null, then null is returned.

Parameters
col : Column or str
        column to fetch first value for.
  
ignorenulls : Column or str
        if first value is null then look for first non-null value.

Returns : Column
        first value of the group.

Notes

The function is non-deterministic because its results depends on the order of the rows which may be non-deterministic after a shuffle.

Examples

df = spark.createDataFrame([("Alice", 2), ("Bob", 5), ("Alice", None)], ("name", "age"))
df = df.orderBy(df.age)

df.groupby("name").agg(first("age")).orderBy("name").show()
+-----+----------+
| name|first(age)|
+-----+----------+
|Alice|      NULL|
|  Bob|         5|
+-----+----------+
Now, to ignore any nulls we needs to set ignorenulls to True

df.groupby("name").agg(first("age", ignorenulls=True)).orderBy("name").show()
+-----+----------+
| name|first(age)|
+-----+----------+
|Alice|         2|
|  Bob|         5|
+-----+----------+

---------------------------------------------------------------------------------------------------------------------------------------------------

pyspark.sql.functions.first_value

Returns the first value of col for a group of rows. 
It will return the first non-null value it sees when ignoreNulls is set to true. 
If all values are null, then null is returned.

Parameters
col : Column or str
        target column to work on.

ignorenulls : Column or bool
        if first value is null then look for first non-null value.

Returns : Column
        some value of col for a group of rows.

Examples

spark.createDataFrame([(None, 1), ("a", 2), ("a", 3), ("b", 8), ("b", 2)], ["a", "b"])
 .select(sf.first_value('a'), sf.first_value('b')).show()
+--------------+--------------+
|first_value(a)|first_value(b)|
+--------------+--------------+
|          NULL|             1|
+--------------+--------------+

spark.createDataFrame([(None, 1), ("a", 2), ("a", 3), ("b", 8), ("b", 2)], ["a", "b"]
).select(sf.first_value('a', True), sf.first_value('b', True)).show()
+--------------+--------------+
|first_value(a)|first_value(b)|
+--------------+--------------+
|             a|             1|
+--------------+--------------+
