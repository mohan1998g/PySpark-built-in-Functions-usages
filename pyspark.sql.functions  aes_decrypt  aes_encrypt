pyspark.sql.functions.aes_decrypt

Returns a decrypted value of input using AES in mode with padding. 
Key lengths of 16, 24 and 32 bits are supported. 
Supported combinations of (mode, padding) are (‘ECB’, ‘PKCS’), (‘GCM’, ‘NONE’) and (‘CBC’, ‘PKCS’). 
Optional additional authenticated data (AAD) is only supported for GCM. 
If provided for encryption, the identical AAD value must be provided for decryption. 
The default mode is GCM.

Parameters
input : Column or str
        The binary value to decrypt.

key : Column or str
        The passphrase to use to decrypt the data.

mode : Column or str, optional
        Specifies which block cipher mode should be used to decrypt messages. Valid modes: ECB, GCM, CBC.

padding : Column or str, optional
        Specifies how to pad messages whose length is not a multiple of the block size. Valid values: PKCS, NONE, DEFAULT. 
        The DEFAULT padding means PKCS for ECB, NONE for GCM and PKCS for CBC.

aad : Column or str, optional
        Optional additional authenticated data. Only supported for GCM mode. 
        This can be any free-form input and must be provided for both encryption and decryption.

Examples

df = spark.createDataFrame([(
    "AAAAAAAAAAAAAAAAQiYi+sTLm7KD9UcZ2nlRdYDe/PX4",
    "abcdefghijklmnop12345678ABCDEFGH", "GCM", "DEFAULT",
    "This is an AAD mixed into the input",)],
    ["input", "key", "mode", "padding", "aad"]
)
df.select(aes_decrypt(
    unbase64(df.input), df.key, df.mode, df.padding, df.aad).alias('r')
).collect()
[Row(r=bytearray(b'Spark'))]
df = spark.createDataFrame([(
    "AAAAAAAAAAAAAAAAAAAAAPSd4mWyMZ5mhvjiAPQJnfg=",
    "abcdefghijklmnop12345678ABCDEFGH", "CBC", "DEFAULT",)],
    ["input", "key", "mode", "padding"]
)
df.select(aes_decrypt(
    unbase64(df.input), df.key, df.mode, df.padding).alias('r')
).collect()
[Row(r=bytearray(b'Spark'))]
df.select(aes_decrypt(unbase64(df.input), df.key, df.mode).alias('r')).collect()
[Row(r=bytearray(b'Spark'))]
df = spark.createDataFrame([(
    "83F16B2AA704794132802D248E6BFD4E380078182D1544813898AC97E709B28A94",
    "0000111122223333",)],
    ["input", "key"]
)
df.select(aes_decrypt(unhex(df.input), df.key).alias('r')).collect()
[Row(r=bytearray(b'Spark'))]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

pyspark.sql.functions.aes_encrypt

Returns an encrypted value of input using AES in given mode with the specified padding. 
Key lengths of 16, 24 and 32 bits are supported. Supported combinations of (mode, padding) are (‘ECB’, ‘PKCS’), (‘GCM’, ‘NONE’) and (‘CBC’, ‘PKCS’). 
Optional initialization vectors (IVs) are only supported for CBC and GCM modes. 
These must be 16 bytes for CBC and 12 bytes for GCM. 
If not provided, a random vector will be generated and prepended to the output. 
Optional additional authenticated data (AAD) is only supported for GCM. 
If provided for encryption, the identical AAD value must be provided for decryption. 
The default mode is GCM.

Parameters
input : Column or str
        The binary value to encrypt.

key : Column or str
        The passphrase to use to encrypt the data.

mode : Column or str, optional
        Specifies which block cipher mode should be used to encrypt messages. Valid modes: ECB, GCM, CBC.

padding : Column or str, optional
        Specifies how to pad messages whose length is not a multiple of the block size. Valid values: PKCS, NONE, DEFAULT. The DEFAULT padding means PKCS for ECB, NONE for GCM and PKCS for CBC.

iv : Column or str, optional
        Optional initialization vector. Only supported for CBC and GCM modes. Valid values: None or “”. 16-byte array for CBC mode. 12-byte array for GCM mode.

aad : Column or str, optional
        Optional additional authenticated data. Only supported for GCM mode. This can be any free-form input and must be provided for both encryption and decryption.

Examples

df = spark.createDataFrame([(
    "Spark", "abcdefghijklmnop12345678ABCDEFGH", "GCM", "DEFAULT",
    "000000000000000000000000", "This is an AAD mixed into the input",)],
    ["input", "key", "mode", "padding", "iv", "aad"]
)
df.select(base64(aes_encrypt(
    df.input, df.key, df.mode, df.padding, to_binary(df.iv, lit("hex")), df.aad)
).alias('r')).collect()
[Row(r='AAAAAAAAAAAAAAAAQiYi+sTLm7KD9UcZ2nlRdYDe/PX4')]
df.select(base64(aes_encrypt(
    df.input, df.key, df.mode, df.padding, to_binary(df.iv, lit("hex")))
).alias('r')).collect()
[Row(r='AAAAAAAAAAAAAAAAQiYi+sRNYDAOTjdSEcYBFsAWPL1f')]
df = spark.createDataFrame([(
    "Spark SQL", "1234567890abcdef", "ECB", "PKCS",)],
    ["input", "key", "mode", "padding"]
)
df.select(aes_decrypt(aes_encrypt(df.input, df.key, df.mode, df.padding),
    df.key, df.mode, df.padding).alias('r')
).collect()
[Row(r=bytearray(b'Spark SQL'))]
df = spark.createDataFrame([(
    "Spark SQL", "0000111122223333", "ECB",)],
    ["input", "key", "mode"]
)
df.select(aes_decrypt(aes_encrypt(df.input, df.key, df.mode),
    df.key, df.mode).alias('r')
).collect()
[Row(r=bytearray(b'Spark SQL'))]
df = spark.createDataFrame([(
    "Spark SQL", "abcdefghijklmnop",)],
    ["input", "key"]
)
df.select(aes_decrypt(
    unbase64(base64(aes_encrypt(df.input, df.key))), df.key
).cast("STRING").alias('r')).collect()
[Row(r='Spark SQL')]
