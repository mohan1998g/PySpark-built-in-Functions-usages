acos(col)           Computes inverse cosine of the input column.

acosh(col)          Computes inverse hyperbolic cosine of the input column.

asin(col)           Computes inverse sine of the input column.

asinh(col)          Computes inverse hyperbolic sine of the input column.

atan(col)           Compute inverse tangent of the input column.

atanh(col)          Computes inverse hyperbolic tangent of the input column.

cos(col)            Computes cosine of the input column.

cosh(col)           Computes hyperbolic cosine of the input column.

cot(col)            Computes cotangent of the input column.

csc(col)            Computes cosecant of the input column.

sin(col)            Computes sine of the input column.

sinh(col)           Computes hyperbolic sine of the input column.

tan(col)            Computes tangent of the input column.

tanh(col)           Computes hyperbolic tangent of the input column.



import math

df = spark.range(1, 3)

df.select(acos(df.id)).show()

df.select(acosh(col("id"))).show()

df.select(atan(df.id)).show()

df.select(asinh(col("id"))).show()

df.select(cos(lit(math.pi))).show()

df.select(cosh(lit(1))).show()

df.select(cot(lit(math.radians(45)))).show()

df.select(csc(lit(math.radians(90)))).show()

df.select(sin(lit(math.radians(90)))).show()

df.select(sinh(lit(1.1))).show()

df.select(tan(lit(math.radians(45)))).show()

df.select(tanh(lit(math.radians(90)))).show()

df = spark.createDataFrame([(0,), (2,)], schema=["numbers"])

df.select(asin(df.schema.fieldNames()[0])).show()

df.select(atanh(df["numbers"])).show()


+--------+
|ACOS(id)|
+--------+
|     0.0|
|     NaN|
+--------+

+------------------+
|         ACOSH(id)|
+------------------+
|               0.0|
|1.3169578969248166|
+------------------+

+------------------+
|          ATAN(id)|
+------------------+
|0.7853981633974483|
|1.1071487177940904|
+------------------+

+------------------+
|         ASINH(id)|
+------------------+
|0.8813735870195429|
|1.4436354751788103|
+------------------+

+----------------------+
|COS(3.141592653589793)|
+----------------------+
|                  -1.0|
|                  -1.0|
+----------------------+

+-----------------+
|          COSH(1)|
+-----------------+
|1.543080634815244|
|1.543080634815244|
+-----------------+

+-----------------------+
|COT(0.7853981633974483)|
+-----------------------+
|     1.0000000000000002|
|     1.0000000000000002|
+-----------------------+

+-----------------------+
|CSC(1.5707963267948966)|
+-----------------------+
|                    1.0|
|                    1.0|
+-----------------------+

+-----------------------+
|SIN(1.5707963267948966)|
+-----------------------+
|                    1.0|
|                    1.0|
+-----------------------+

+-----------------+
|        SINH(1.1)|
+-----------------+
|1.335647470124177|
|1.335647470124177|
+-----------------+

+-----------------------+
|TAN(0.7853981633974483)|
+-----------------------+
|     0.9999999999999999|
|     0.9999999999999999|
+-----------------------+

+------------------------+
|TANH(1.5707963267948966)|
+------------------------+
|      0.9171523356672744|
|      0.9171523356672744|
+------------------------+

+-------------+
|ASIN(numbers)|
+-------------+
|          0.0|
|          NaN|
+-------------+

+--------------+
|ATANH(numbers)|
+--------------+
|           0.0|
|           NaN|
+--------------+


pyspark.sql.functions.atan2

Parameters
col1 : str, Column or float
        coordinate on y-axis

col2 : str, Column or float
        coordinate on x-axis

Returns : Column
the theta component of the point (r, theta) in polar coordinates that corresponds to the point (x, y) in Cartesian coordinates, 
as if computed by java.lang.Math.atan2()

Examples

df = spark.range(1)
df.select(atan2(lit(1), lit(2))).first()
Row(ATAN2(1, 2)=0.46364...)
